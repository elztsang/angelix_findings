char str_array[10][11] = {
        "1",            //0 = good, 1
        "isbaddata",    //1 = bad, 9
        "ii",           //2 = good, 2
        "333",          //3 = good, 3
        "donotaccess",  //4 = bad, 11
        "four",         //5 = good, 4
        "fives",        //6 = good, 5
        "123456",       //7 = good, 6
        "seven77",      //8 = good, 7
        "gooddata",     //9 = good, 8
};

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#ifndef ANGELIX_OUTPUT
#define ANGELIX_OUTPUT(type, expr, id) expr
#endif

char str_array[7][11] = {
        "okaydata",     //0 = good, 8
        "isbaddata",	//1 = bad, 9
        "seven77",	//2 = good, 7
        "gooddata",     //3 = good, 8
	"donotaccess",  //4 = bad, 11
	"1",		//5 = good, 1
	"four",		//6 = good, 4
};

struct eth {
	int num1; //data, should be 0
	int num2; //data_end, should be < 8
};

void get_data(int which, int *data, int *data_end){

	*data = 0;
	*data_end = strlen(str_array[which]);
}

int main(int argc, char**argv) {
	int which, x, struct_size;
	which = atoi(argv[1]); //assume this is always <= 4
	x = -1; //default returns bad data
	struct_size = sizeof(struct eth*);
//	printf("size of eth:  %d\n", struct_size);
	int data, data_end;
	get_data(which, &data, &data_end);

	struct eth hdr;	//this is not memory allocated. not sure if i need to
	hdr.num1 = data;

	hdr.num2 = data_end;

	//fix: if(data + sizeof(struct eth*) < data_end);
		x = hdr.num2;	//good data
	printf("%d\n", ANGELIX_OUTPUT(int, x, "stdout"));

	return 0;
}
